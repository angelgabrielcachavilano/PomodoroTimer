{"version":3,"sources":["Components/Intervals.module.css","PomodoroTimer.module.css","Components/Timer.module.css","Components/assets/play.svg","Components/assets/stop.svg","Components/assets/reset.svg","Components/assets/swiftly.mp3","Components/assets/profile.jpeg","Components/BreakInterval.jsx","Components/SessionLength.jsx","Components/Timer.jsx","PomodoroTimer.jsx","serviceWorker.js","index.js"],"names":["module","exports","BreakInterval","props","className","style","container","sessionType","flex","isPlay","disBtn","btn","disabled","onClick","breakInterval","decreaseBreak","number","increaseBreak","SessionLength","sessionLength","decreaseSession","increaseSession","Sound","require","default","Timer","state","isSession","timerSecond","intervalId","startTimer","bind","stopTimer","resetTimer","decreaseTimer","setInterval","this","onPlayStopTimer","setState","timerMinute","toggleInterval","updateTimerMinute","prevState","clearInterval","focusBreak","clock","btnContainer","icon","src","play","alt","stop","reset","url","alert","playStatus","status","PLAYING","onLoading","handleSongLoading","onPlaying","handleSongPlaying","onFinishedPlaying","handleSongFinishedPlaying","React","Component","PomodoroTimer","breakLength","onIncreaseBreakLength","onDecreaseBreakLength","onIncreaseSessionLength","onDecreaseSessionLength","onUpdateTimerMinute","onToggleInterval","onResetTimer","main","options","title","info","paraph","href","target","howTo","instructions","credits","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e98c9e42.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"flex\":\"Intervals_flex__2PwU9\",\"container\":\"Intervals_container__XUojN\",\"sessionType\":\"Intervals_sessionType__33auL\",\"btn\":\"Intervals_btn__1Mt05\",\"disBtn\":\"Intervals_disBtn__Ee4-J\",\"number\":\"Intervals_number__1oIeb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"PomodoroTimer_main__3_Pyb\",\"title\":\"PomodoroTimer_title__1QILJ\",\"options\":\"PomodoroTimer_options__1RGXx\",\"info\":\"PomodoroTimer_info__Kg2YB\",\"paraph\":\"PomodoroTimer_paraph__3Vz5K\",\"howTo\":\"PomodoroTimer_howTo__1TIYb\",\"instructions\":\"PomodoroTimer_instructions__1fTLA\",\"flex\":\"PomodoroTimer_flex__3NwCe\",\"credits\":\"PomodoroTimer_credits__19AP9\",\"profile\":\"PomodoroTimer_profile__136cw\",\"container\":\"PomodoroTimer_container__3Ucux\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Timer_container__vg6ps\",\"focusBreak\":\"Timer_focusBreak__1l3Ag\",\"clock\":\"Timer_clock__205nF\",\"btn\":\"Timer_btn__2alXA\",\"icon\":\"Timer_icon__3ueTr\"};","module.exports = __webpack_public_path__ + \"static/media/play.7294772b.svg\";","module.exports = __webpack_public_path__ + \"static/media/stop.e58915ce.svg\";","module.exports = __webpack_public_path__ + \"static/media/reset.7b1b3b1f.svg\";","module.exports = __webpack_public_path__ + \"static/media/swiftly.d8d435aa.mp3\";","module.exports = __webpack_public_path__ + \"static/media/profile.ea264657.jpeg\";","import React from 'react';\nimport style from './Intervals.module.css';\n\nfunction BreakInterval(props){\n    function decreaseCounter() {\n        if(props.breakInterval === 1){\n            return;\n        }\n        props.decreaseBreak();\n    }\n\n    function increaseCounter() {\n        if(props.breakInterval === 15){\n            return;\n        }\n        props.increaseBreak();\n    }\n    return(\n        <section className = {style.container}>\n            <h3 className = {style.sessionType}>Break time</h3>\n            <section className = {style.flex}>\n            <button className = {props.isPlay ? style.disBtn : style.btn} disabled = {props.isPlay === true ? 'true' : ''} onClick = {decreaseCounter}>-</button>\n            <p className = {style.number}>{props.breakInterval}'</p>\n            <button className = {props.isPlay ? style.disBtn : style.btn} disabled = {props.isPlay === true ? 'true' : ''} onClick = {increaseCounter}>+</button>\n            </section>\n        </section>\n    )\n}\n\nexport default BreakInterval;","import React from 'react';\nimport style from './Intervals.module.css';\n\nfunction SessionLength (props) {\n    function increaseSession() {\n        if (props.sessionLength === 60) {\n            return;\n        }\n        props.increaseSession();\n    }\n\n    function decreaseSession() {\n        if (props.sessionLength === 1) {\n            return;\n        }\n        props.decreaseSession();\n    }\n\n    return (\n        <section className = {style.container}>\n            <h3 className = {style.sessionType}>Focus time</h3>\n        <section className = {style.flex}>\n            <button className = {props.isPlay ? style.disBtn : style.btn} disabled = {props.isPlay === true ? 'true' : ''} onClick = {decreaseSession}>-</button>\n            <p className = {style.number}>{props.sessionLength}'</p>\n            <button className = {props.isPlay ? style.disBtn : style.btn} disabled = {props.isPlay === true ? 'true' : ''} onClick = {increaseSession}>+</button>\n        </section>\n        </section>\n    )\n}\n\nexport default SessionLength;","import React from 'react';\nimport style from './Timer.module.css';\nimport play from './assets/play.svg';\nimport stop from './assets/stop.svg';\nimport reset from './assets/reset.svg';\nimport alert from './assets/swiftly.mp3';\nvar Sound = require('react-sound').default;\n\n\nclass Timer extends React.Component {\n    constructor(){\n        super();\n\n        this.state = {\n            isSession: true,\n            timerSecond: 0,\n            intervalId: 0\n        }\n\n        this.startTimer = this.startTimer.bind(this);\n        this.stopTimer = this.stopTimer.bind(this);\n        this.resetTimer = this.resetTimer.bind(this);\n        this.decreaseTimer = this.decreaseTimer.bind(this);\n    }\n\n   \n   \n   \n\n    startTimer() {\n        let intervalId = setInterval(this.decreaseTimer,1000);\n        this.props.onPlayStopTimer(true);\n        this.setState({\n            intervalId: intervalId\n        })\n    }\n    \n    decreaseTimer() {\n        switch(this.state.timerSecond) {\n            case 0:\n                if(this.props.timerMinute === 0) {\n                   \n                    if(this.state.isSession) {\n                        this.setState({\n                            isSession: false\n                        })\n                        this.props.toggleInterval(this.state.isSession);\n                        \n                        \n                    } else {\n                        this.setState({\n                            isSession: true\n                        })\n                        this.props.toggleInterval(this.state.isSession);\n                        \n                    }\n                } else {\n                this.props.updateTimerMinute()\n                this.setState({\n                    timerSecond: 59\n                })\n            }\n                break; \n            default:\n                this.setState((prevState) => {\n                    return {\n                        timerSecond: prevState.timerSecond - 1\n                    }\n                })\n                break;\n        }\n    }\n\n    stopTimer() {\n        clearInterval(this.state.intervalId);\n        this.props.onPlayStopTimer(false);\n    }\n\n    resetTimer() {\n        this.stopTimer();\n        this.props.resetTimer(false)\n        this.setState({\n            timerSecond: 0,\n            isSession: true\n        })\n    }\n\n \n \n    \n    render() {\n        return (\n            <section className = {style.container} >\n                <section >\n                    <h4 className = {style.focusBreak}>{this.state.isSession === true ? 'Time to focus!' : 'Take a break!'}</h4>\n                    <div className = {style.clock}>\n                    <span>{this.props.timerMinute < 10 ? '0' + this.props.timerMinute : this.props.timerMinute}</span>\n                    <span>:</span>\n                    <span>\n                    {this.state.timerSecond === 0\n                    ? '00'\n                    : this.state.timerSecond < 10\n                    ? '0' + this.state.timerSecond\n                    : this.state.timerSecond}\n                    </span>\n                    </div>\n                </section>\n                <section className = {style.btnContainer}>\n                    <button className = {style.btn} disabled = {this.props.isPlay} onClick = {this.startTimer}> <img className = {style.icon} src = {play} alt = \"\" /></button>\n                    <button className = {style.btn} onClick = {this.stopTimer} > <img className = {style.icon} src = {stop} alt = \"\"/> </button>\n                    <button className = {style.btn} onClick = {this.resetTimer}> <img className = {style.icon} src = {reset}alt = \"\"/></button>\n                    { this.props.timerMinute === 0 && (this.state.timerSecond === 1 || this.state.timerSecond === 0 ) ? <Sound\n                    url={alert}\n                    playStatus={Sound.status.PLAYING}\n                    \n                    onLoading={this.handleSongLoading}\n                    onPlaying={this.handleSongPlaying}\n                    onFinishedPlaying={this.handleSongFinishedPlaying}\n                    />\n                    : null}\n                \n                  \n\n                </section>\n            </section>\n        )\n    }\n}\n\n\nexport default Timer;","import React from 'react';\nimport style from './PomodoroTimer.module.css';\nimport BreakInterval from './Components/BreakInterval';\nimport SessionLength from './Components/SessionLength';\nimport Timer from './Components/Timer';\nimport profile from './Components/assets/profile.jpeg'\n\nclass PomodoroTimer extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      breakLength: 5,\n      sessionLength: 25,\n      timerMinute: 25 ,\n      isPlay: false\n    }\n    this.onIncreaseBreakLength = this.onIncreaseBreakLength.bind(this);\n    this.onDecreaseBreakLength = this.onDecreaseBreakLength.bind(this);\n    this.onIncreaseSessionLength = this.onIncreaseSessionLength.bind(this);\n    this.onDecreaseSessionLength = this.onDecreaseSessionLength.bind(this);\n    this.onUpdateTimerMinute = this.onUpdateTimerMinute.bind(this);\n    this.onToggleInterval = this.onToggleInterval.bind(this);\n    this.onResetTimer = this.onResetTimer.bind(this);\n    this.onPlayStopTimer = this.onPlayStopTimer.bind(this);\n    \n  }\n\n  onIncreaseBreakLength() {\n    this.setState((prevState) => {\n      return {\n        breakLength: prevState.breakLength + 1\n      }\n    })\n  }\n\n  onDecreaseBreakLength() {\n    this.setState((prevState) => {\n      return {\n        breakLength: prevState.breakLength - 1\n      }\n    })\n  }\n\n  onIncreaseSessionLength() {\n    this.setState((prevState) => {\n      return {\n        sessionLength: prevState.sessionLength + 1,\n        timerMinute: prevState.sessionLength + 1\n      }\n    })\n  }\n\n  onDecreaseSessionLength() {\n    this.setState((prevState) => {\n      return {\n        sessionLength: prevState.sessionLength - 1,\n        timerMinute: prevState.sessionLength - 1\n      }\n    })\n  }\n  \n  onUpdateTimerMinute() {\n    this.setState((prevState) => {\n      return {\n        timerMinute: prevState.timerMinute - 1\n      }\n    })\n  }\n\n  onToggleInterval(isSession) {\n    if(isSession){\n      this.setState({\n        timerMinute: this.state.sessionLength\n      })\n    } else {\n      this.setState({\n        timerMinute: this.state.breakLength\n      })\n    }\n  }\n\n  onResetTimer() {\n    this.setState({\n      timerMinute: this.state.sessionLength\n    })\n  }\n\n  onPlayStopTimer(isPlay) {\n    this.setState({\n      isPlay: isPlay\n    })\n  }\n\nrender() {\n  return (\n    <main className = {style.main}>\n      <div className = {style.options}>\n      <h2 className = {style.title}>Pomodoro Timer</h2>\n      <div className = {style.info}>\n      <p className = {style.paraph}>\n        The <a href = \"https://en.wikipedia.org/wiki/Pomodoro_Technique\" target=\"_blank\">Pomodoro Technique</a> is a time management method originally\n        developed by Francisco Cirillo. \n      </p>\n      <h4 className = {style.howTo}>How does it work?</h4>\n      <p className = {style.instructions}>\n         Focus hard during 25 minutes and get down to business. Then take a short 5 minute break.\n         After 4 Pomodoro Sessions, stop the clock and take a long break of 25 minutes.\n      </p>\n      </div>\n      <div className = {style.flex}>\n      <BreakInterval\n      isPlay = {this.state.isPlay}\n      breakInterval = {this.state.breakLength}\n      increaseBreak = {this.onIncreaseBreakLength}\n      decreaseBreak = {this.onDecreaseBreakLength}/>\n      <SessionLength\n      isPlay = {this.state.isPlay}\n      sessionLength = {this.state.sessionLength}\n      increaseSession = {this.onIncreaseSessionLength}\n      decreaseSession = {this.onDecreaseSessionLength}\n      />\n      </div>\n      <div className = {style.credits}>\n      <p>Developed by <a href=\"https://www.linkedin.com/in/luccalipisky/\" target=\"_blank\">Lucca Lipisky</a> | Full Project <a href = \"https://github.com/luccalipisky/PomodoroTimer\" target=\"_blank\">here</a></p>\n      </div>\n      </div>\n      <div className = {style.container}>\n      <Timer\n      isPlay = {this.state.isPlay}\n      timerMinute = {this.state.timerMinute}\n      breakLength = {this.state.breakLength}\n      updateTimerMinute = {this.onUpdateTimerMinute}\n      toggleInterval = {this.onToggleInterval}\n      resetTimer = {this.onResetTimer}\n      onPlayStopTimer = {this.onPlayStopTimer}\n      />\n      </div>\n    </main>\n  );\n}\n}\n\nexport default PomodoroTimer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PomodoroTimer from './PomodoroTimer';\nimport * as serviceWorker from './serviceWorker';\nimport Pomodoro from './PomodoroTimer';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Pomodoro />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}